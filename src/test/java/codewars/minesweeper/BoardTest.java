package codewars.minesweeper;

import codewars.minesweeper.Board;
import org.junit.Test;


import static org.junit.Assert.*;

public class BoardTest {
    
    @Test
    public void parse() {
        final Board board = Board.parse("1 x 1 1 x 1\n2 2 2 1 2 2\n2 x 2 0 1 x\n2 x 2 1 2 2\n1 1 1 1 x 1\n0 0 0 1 1 1", 12);
        assertEquals(board, null);
    }
    
    @Test
    public void solve() {
        final Board board = Board.parse("0 0 0 ? ? ? ? ? ? 0 0 0 0 0 ? ? ? 0 0 ? ? ? ? ? ? ? ?\n" +
                "? ? 0 ? ? ? ? ? ? 0 0 0 0 0 ? ? ? ? ? ? ? ? ? ? ? ? ?\n" +
                "? ? ? ? 0 0 0 0 0 0 ? ? ? 0 ? ? ? ? ? ? 0 ? ? ? ? ? ?\n" +
                "? ? ? ? 0 0 0 0 0 0 ? ? ? 0 0 0 0 ? ? ? 0 ? ? ? ? ? ?\n" +
                "0 ? ? ? 0 0 0 0 0 0 ? ? ? 0 0 0 0 0 0 0 0 ? ? ? ? ? ?\n" +
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ? ? ? ? 0", 16);
        board.solve();
        System.out.println(board);
        assertEquals("0 0 0 1 x 1 1 x 1 0 0 0 0 0 1 1 1 0 0 1 x 3 x 3 1 2 1\n" +
                "1 1 0 1 1 1 1 1 1 0 0 0 0 0 1 x 1 1 1 2 1 3 x 3 x 2 x\n" +
                "x 2 1 1 0 0 0 0 0 0 1 1 1 0 1 1 1 1 x 1 0 2 2 3 1 3 2\n" +
                "1 2 x 1 0 0 0 0 0 0 1 x 1 0 0 0 0 1 1 1 0 1 x 2 1 2 x\n" +
                "0 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 2 3 x 2 1\n" +
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 x 2 1 0", board.toString());
    }
    @Test
    public void solve2() {
        final Board board = Board.parse("? ? 0 ? ? ? 0 0 ? ? ? 0 0 0 0 ? ? ? 0\n"+
                "? ? 0 ? ? ? 0 0 ? ? ? 0 0 0 0 ? ? ? ?\n"+
                "? ? 0 ? ? ? ? ? ? ? ? 0 0 0 0 ? ? ? ?\n"+
                "0 ? ? ? ? ? ? ? ? ? ? 0 0 0 0 0 ? ? ?\n"+
                "0 ? ? ? ? ? ? ? ? ? 0 0 0 0 0 0 0 0 0\n"+
                "0 ? ? ? 0 0 0 ? ? ? 0 0 0 0 0 0 0 0 0\n"+
                "0 0 0 0 0 0 0 ? ? ? ? ? ? ? 0 0 0 0 0\n"+
                "0 0 0 0 0 0 0 0 0 0 ? ? ? ? 0 0 0 0 0\n"+
                "0 0 ? ? ? 0 ? ? ? 0 ? ? ? ? 0 0 0 0 0\n"+
                "0 0 ? ? ? ? ? ? ? 0 0 0 0 0 0 ? ? ? 0\n"+
                "0 0 ? ? ? ? ? ? ? ? ? 0 0 0 0 ? ? ? 0\n"+
                "0 0 0 0 ? ? ? ? ? ? ? 0 0 0 0 ? ? ? 0\n"+
                "0 0 0 0 0 ? ? ? ? ? ? 0 0 0 0 0 ? ? ?\n"+
                "0 0 ? ? ? ? ? ? 0 0 0 0 0 0 0 0 ? ? ?\n"+
                "0 0 ? ? ? ? ? ? ? 0 0 0 0 0 0 0 ? ? ?\n"+
                "0 0 ? ? ? ? ? ? ? ? 0 0 0 0 0 0 0 ? ?\n"+
                "0 0 0 0 0 0 ? ? ? ? 0 0 0 ? ? ? 0 ? ?\n"+
                "0 0 0 ? ? ? ? ? ? ? 0 0 0 ? ? ? ? ? ?\n"+
                "0 0 0 ? ? ? ? ? 0 0 0 ? ? ? ? ? ? ? ?\n"+
                "0 0 0 ? ? ? ? ? 0 0 0 ? ? ? 0 ? ? ? ?\n"+
                "0 0 0 0 ? ? ? ? ? ? ? ? ? ? 0 ? ? ? ?\n"+
                "0 0 0 0 ? ? ? ? ? ? ? ? ? ? 0 ? ? ? ?\n"+
                "0 0 0 0 ? ? ? ? ? ? ? ? ? ? 0 ? ? ? ?", 43);
        board.solve();
        System.out.println(board);
        assertEquals("1 1 0 1 1 1 0 0 1 1 1 0 0 0 0 1 1 1 0\n" +
                "x 1 0 1 x 1 0 0 2 x 2 0 0 0 0 1 x 2 1\n" +
                "1 1 0 2 3 3 1 1 3 x 2 0 0 0 0 1 2 x 1\n" +
                "0 1 1 2 x x 1 2 x 3 1 0 0 0 0 0 1 1 1\n" +
                "0 1 x 2 2 2 1 3 x 3 0 0 0 0 0 0 0 0 0\n" +
                "0 1 1 1 0 0 0 2 x 2 0 0 0 0 0 0 0 0 0\n" +
                "0 0 0 0 0 0 0 1 1 1 1 2 2 1 0 0 0 0 0\n" +
                "0 0 0 0 0 0 0 0 0 0 1 x x 1 0 0 0 0 0\n" +
                "0 0 1 1 1 0 1 1 1 0 1 2 2 1 0 0 0 0 0\n" +
                "0 0 1 x 2 1 3 x 2 0 0 0 0 0 0 1 1 1 0\n" +
                "0 0 1 1 2 x 3 x 3 1 1 0 0 0 0 1 x 1 0\n" +
                "0 0 0 0 1 2 3 2 2 x 1 0 0 0 0 1 1 1 0\n" +
                "0 0 0 0 0 1 x 1 1 1 1 0 0 0 0 0 1 1 1\n" +
                "0 0 1 1 2 2 2 1 0 0 0 0 0 0 0 0 1 x 1\n" +
                "0 0 1 x 2 x 2 1 1 0 0 0 0 0 0 0 1 1 1\n" +
                "0 0 1 1 2 1 3 x 3 1 0 0 0 0 0 0 0 1 1\n" +
                "0 0 0 0 0 0 2 x x 1 0 0 0 1 1 1 0 1 x\n" +
                "0 0 0 1 1 1 1 2 2 1 0 0 0 1 x 1 1 2 2\n" +
                "0 0 0 1 x 3 2 1 0 0 0 1 1 2 1 1 1 x 2\n" +
                "0 0 0 1 2 x x 1 0 0 0 1 x 1 0 1 2 3 x\n" +
                "0 0 0 0 1 2 2 1 1 1 1 1 1 1 0 1 x 3 2\n" +
                "0 0 0 0 1 1 1 1 2 x 1 1 1 1 0 2 3 x 2\n" +
                "0 0 0 0 1 x 1 1 x 2 1 1 x 1 0 1 x 3 x", board.toString());
    }

    @Test
    public void solveGame3() {
        final Board board = Board.parse("0 0 0 0 0 0 0 ? ? ?\n" +
                "? ? ? ? ? ? 0 ? ? ?\n" +
                "? ? ? ? ? ? 0 ? ? ?\n" +
                "? ? ? ? ? ? 0 ? ? ?\n" +
                "0 0 ? ? ? ? ? ? 0 0\n" +
                "0 0 ? ? ? ? ? ? ? ?\n" +
                "0 0 ? ? ? ? ? ? ? ?\n" +
                "0 0 0 0 ? ? ? ? ? ?\n" +
                "0 0 0 0 ? ? ? ? ? ?\n" +
                "0 0 0 ? ? ? ? 0 0 0\n" +
                "0 0 0 ? ? ? ? 0 0 0\n" +
                "0 0 0 ? ? ? ? 0 0 0\n" +
                "0 0 0 0 0 0 0 0 0 0\n" +
                "0 0 0 0 0 0 0 0 0 0\n" +
                "? ? 0 ? ? ? 0 0 0 0\n" +
                "? ? 0 ? ? ? 0 0 0 0\n" +
                "? ? ? ? ? ? ? ? ? 0\n" +
                "? ? ? ? ? ? ? ? ? ?\n" +
                "? ? ? ? ? ? ? ? ? ?\n" +
                "0 0 ? ? ? 0 0 ? ? ?\n" +
                "0 0 ? ? ? ? ? ? ? ?\n" +
                "0 0 ? ? ? ? ? ? ? ?\n" +
                "0 0 0 0 0 ? ? ? ? ?", 23);
        board.solve();
        System.out.println(board);
        assertEquals("0 0 0 0 0 0 0 1 1 1\n" +
                "1 1 1 1 1 1 0 2 x 2\n" +
                "1 x 2 2 x 1 0 2 x 2\n" +
                "1 1 2 x 2 1 0 1 1 1\n" +
                "0 0 2 2 2 1 1 1 0 0\n" +
                "0 0 1 x 1 1 x 2 1 1\n" +
                "0 0 1 1 2 2 2 3 x 2\n" +
                "0 0 0 0 1 x 1 2 x 2\n" +
                "0 0 0 0 1 1 1 1 1 1\n" +
                "0 0 0 1 2 2 1 0 0 0\n" +
                "0 0 0 1 x x 1 0 0 0\n" +
                "0 0 0 1 2 2 1 0 0 0\n" +
                "0 0 0 0 0 0 0 0 0 0\n" +
                "0 0 0 0 0 0 0 0 0 0\n" +
                "1 1 0 1 1 1 0 0 0 0\n" +
                "x 1 0 1 x 1 0 0 0 0\n" +
                "2 3 1 3 2 2 1 1 1 0\n" +
                "x 2 x 2 x 1 1 x 2 1\n" +
                "1 2 1 2 1 1 1 2 x 1\n" +
                "0 0 1 1 1 0 0 1 1 1\n" +
                "0 0 1 x 1 1 1 2 2 2\n" +
                "0 0 1 1 1 1 x 2 x x\n" +
                "0 0 0 0 0 1 1 2 2 2", board.toString());
    }

    @Test
    public void solveGame4() {
        final Board board = Board.parse("0 ? ? ? ? ? 0 0 0 ? ? ? ? ? ? ? ? 0 0 0\n" +
                "0 ? ? ? ? ? 0 0 0 ? ? ? ? ? ? ? ? 0 0 0\n" +
                "0 ? ? ? ? ? 0 0 0 ? ? ? ? ? ? ? 0 0 ? ?\n" +
                "0 0 0 ? ? ? 0 0 0 0 ? ? ? ? ? ? 0 0 ? ?\n" +
                "0 0 0 ? ? ? 0 0 0 0 0 0 0 0 0 0 0 ? ? ?\n" +
                "0 ? ? ? ? ? 0 0 0 0 0 0 0 0 0 0 0 ? ? ?\n" +
                "0 ? ? ? 0 ? ? ? 0 0 0 0 0 ? ? ? 0 ? ? ?\n" +
                "0 ? ? ? 0 ? ? ? ? ? ? 0 0 ? ? ? ? ? 0 0\n" +
                "0 ? ? ? 0 ? ? ? ? ? ? 0 0 ? ? ? ? ? 0 0\n" +
                "0 ? ? ? 0 0 0 ? ? ? ? 0 0 0 0 ? ? ? 0 0\n" +
                "0 ? ? ? 0 0 0 0 0 0 0 0 0 0 0 ? ? ? ? 0\n" +
                "0 ? ? ? 0 0 0 0 0 ? ? ? 0 0 0 ? ? ? ? 0\n" +
                "0 ? ? ? 0 0 0 0 0 ? ? ? ? ? 0 ? ? ? ? 0\n" +
                "? ? ? ? 0 0 0 0 0 ? ? ? ? ? 0 ? ? ? ? 0\n" +
                "? ? 0 0 0 0 0 0 0 0 0 ? ? ? 0 ? ? ? ? ?\n" +
                "? ? ? ? 0 0 0 0 0 0 0 0 0 0 0 ? ? ? ? ?\n" +
                "? ? ? ? 0 0 ? ? ? ? ? 0 ? ? ? 0 0 ? ? ?\n" +
                "? ? ? ? ? ? ? ? ? ? ? 0 ? ? ? 0 0 0 0 0\n" +
                "? ? ? ? ? ? ? ? ? ? ? 0 ? ? ? ? 0 0 0 0\n" +
                "0 ? ? ? ? ? ? ? ? 0 0 0 ? ? ? ? 0 0 0 0\n" +
                "0 0 0 0 ? ? ? ? ? 0 0 0 ? ? ? ? 0 0 0 0\n" +
                "0 0 0 0 ? ? ? 0 0 0 0 0 ? ? ? ? 0 0 0 0\n" +
                "0 0 0 0 0 0 0 ? ? ? ? 0 ? ? ? ? 0 0 0 0\n" +
                "? ? ? ? ? 0 0 ? ? ? ? ? ? ? ? ? ? ? ? 0\n" +
                "? ? ? ? ? 0 0 ? ? ? ? ? ? 0 ? ? ? ? ? ?\n" +
                "? ? ? ? ? 0 0 0 0 0 ? ? ? ? ? ? ? ? ? ?\n" +
                "? ? ? ? ? ? 0 0 0 0 0 ? ? ? 0 0 0 ? ? ?\n" +
                "? ? ? ? ? ? 0 0 0 0 0 ? ? ? 0 0 0 ? ? ?\n" +
                "? ? ? ? ? ? 0 0 0 0 0 0 0 0 0 0 0 ? ? ?", 58);
        board.solve();
        System.out.println(board);
        assertEquals("0 1 1 2 1 1 0 0 0 1 1 2 2 2 2 x 1 0 0 0\n" +
                "0 1 x 2 x 1 0 0 0 1 x 3 x x 3 2 1 0 0 0\n" +
                "0 1 1 2 1 1 0 0 0 1 2 x 3 3 x 1 0 0 1 1\n" +
                "0 0 0 1 1 1 0 0 0 0 1 1 1 1 1 1 0 0 1 x\n" +
                "0 0 0 1 x 1 0 0 0 0 0 0 0 0 0 0 0 1 2 2\n" +
                "0 1 1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 1 x 1\n" +
                "0 1 x 1 0 1 1 1 0 0 0 0 0 1 1 1 0 1 1 1\n" +
                "0 1 1 1 0 1 x 2 2 2 1 0 0 1 x 2 1 1 0 0\n" +
                "0 1 1 1 0 1 1 2 x x 1 0 0 1 1 2 x 1 0 0\n" +
                "0 1 x 1 0 0 0 1 2 2 1 0 0 0 0 2 2 2 0 0\n" +
                "0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 x 2 1 0\n" +
                "0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 1 2 x 1 0\n" +
                "0 1 x 1 0 0 0 0 0 1 x 2 1 1 0 1 3 3 2 0\n" +
                "1 2 1 1 0 0 0 0 0 1 1 2 x 1 0 2 x x 1 0\n" +
                "x 1 0 0 0 0 0 0 0 0 0 1 1 1 0 2 x 4 3 2\n" +
                "1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 1 1 2 x x\n" +
                "1 2 x 1 0 0 1 2 3 2 1 0 1 1 1 0 0 1 2 2\n" +
                "1 x 3 3 1 1 1 x x x 1 0 2 x 2 0 0 0 0 0\n" +
                "1 2 x 2 x 1 2 3 4 2 1 0 2 x 3 1 0 0 0 0\n" +
                "0 1 1 2 2 2 2 x 1 0 0 0 1 2 x 1 0 0 0 0\n" +
                "0 0 0 0 1 x 2 1 1 0 0 0 1 2 2 1 0 0 0 0\n" +
                "0 0 0 0 1 1 1 0 0 0 0 0 1 x 2 1 0 0 0 0\n" +
                "0 0 0 0 0 0 0 1 2 2 1 0 1 2 x 1 0 0 0 0\n" +
                "1 1 1 1 1 0 0 1 x x 2 1 1 1 2 2 2 1 1 0\n" +
                "x 2 3 x 2 0 0 1 2 2 2 x 1 0 1 x 2 x 2 1\n" +
                "2 x 3 x 2 0 0 0 0 0 1 2 2 1 1 1 2 1 2 x\n" +
                "2 3 3 3 2 1 0 0 0 0 0 1 x 1 0 0 0 1 2 2\n" +
                "x 2 x 2 x 1 0 0 0 0 0 1 1 1 0 0 0 1 x 1\n" +
                "1 2 1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 1 1 1", board.toString());
    }

    @Test
    public void solveGame5() {
        final Board board = Board.parse("0 0 0 0\n" +
                "0 0 0 0\n" +
                "? ? 0 0\n" +
                "? ? ? ?\n" +
                "? ? ? ?\n" +
                "? ? ? ?\n" +
                "? ? 0 0\n" +
                "0 0 0 0\n" +
                "0 0 0 0\n" +
                "0 0 0 0", 4);
        board.solve();
        System.out.println(board);
        assertEquals("0 0 0 0\n" +
                "0 0 0 0\n" +
                "1 1 0 0\n" +
                "x 2 1 1\n" +
                "x 3 1 x\n" +
                "x 2 1 1\n" +
                "1 1 0 0\n" +
                "0 0 0 0\n" +
                "0 0 0 0\n" +
                "0 0 0 0", board.toString());
    }


}